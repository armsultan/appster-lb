# Run sequentially
stages:
  # - configure_test
  - build
  - test
  - push
  - clean_up

variables:
  CONTAINER_CROSSPLANE: registry.gitlab.com/$GITLAB_USER_LOGIN/nginx-plus-dockerfiles:ubuntu18.04_crossplane
  CONTAINER_NGINX_PLUS: registry.gitlab.com/armsultan/nginx-plus-dockerfiles:alpine3.9
  NAME_CONTAINER_NGINX: nginx-plus-appster-lb # container name
  NAME_CONTAINER_CROSSPLANE: nginx-plus-crossplane-appster-lb

build_nginx_container: # CI_JOB_NAME
  stage: build
  script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" https://registry.gitlab.com
    - docker pull $CONTAINER_NGINX_PLUS

build_crossplane_container: # CI_JOB_NAME
  stage: build
  script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" https://registry.gitlab.com
    - docker pull $CONTAINER_CROSSPLANE

test_nginx_conf: # CI_JOB_NAME
  stage: test
  script:
    # Copy Self-signed cert and key stored in GITLAB. Required to test TLS
    - echo "$SELF_SIGNED_KEY" > "etc/ssl/appster.com.key"
    - echo "$SELF_SIGNED_CRT" > "etc/ssl/appster.com.crt"
    # Copy test DHPARAMS stored in GITLAB.. Required to test TLS
    - echo "$DHPARAMS_2048" > "etc/ssl/dhparam_2048.pem"
    - echo "$DHPARAMS_4096" > "etc/ssl/dhparam_4096.pem"
    # Point to Test environment for testing
    - cp environments/test.conf etc/nginx/conf.d
    - cat etc/nginx/conf.d/test.conf
    # Point load balancing to test upstream (linux search and replace)
    - find ./etc/nginx/ -type f -exec sed -i -e 's/${upstream}/dummy_servers_html/g' {} \;
    - cat etc/nginx/conf.d/www.appster.com.conf
    # "nginx -T": Output full NGINX config for debugging
    - docker run --rm -t -a stdout --name $NAME_CONTAINER_NGINX --sysctl net.ipv4.ip_nonlocal_bind=1 -v "$(pwd)/etc/nginx/:/etc/nginx/" -v "$(pwd)/etc/ssl/:/etc/ssl/" $CONTAINER_NGINX_PLUS nginx -T
    # "nginx -t": test NGINX config for config errors
    - docker run --rm -t -a stdout --name $NAME_CONTAINER_NGINX --sysctl net.ipv4.ip_nonlocal_bind=1 -v "$(pwd)/etc/nginx/:/etc/nginx/" -v "$(pwd)/etc/ssl/:/etc/ssl/" $CONTAINER_NGINX_PLUS nginx -t

crossplane_nginx_conf: # CI_JOB_NAME
  stage: test
  script:
    - docker run --rm -t -a stdout --name $NAME_CONTAINER_CROSSPLANE --sysctl net.ipv4.ip_nonlocal_bind=1 -v "$(pwd)/etc/nginx/:/etc/nginx/" $CONTAINER_CROSSPLANE crossplane parse /etc/nginx/nginx.conf | jq '.status, .errors[]'

push: # CI_JOB_NAME
  stage: push
  script:
    - sed -i -e '/#${servers}/{r environments/production.conf' -e 'd}' etc/nginx/conf.d/*.conf
    - GIT_SSH_COMMAND='ssh -i $PRIVATE_KEY_FILE -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no' git remote add production $PROD_USER@$PROD_HOST:deploy
    - GIT_SSH_COMMAND='ssh -i $PRIVATE_KEY_FILE -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no' git push -u -f production master
    # - ssh-agent sh -c 'ssh-add ~/.ssh/id_rsa; git fetch user@host'
clean_up:
  stage: clean_up
  script:
    - docker system prune -f
    - docker images
  when: always # Run regardless of job failures