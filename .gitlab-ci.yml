# Run sequentially
stages:
  - configure_test
  - build
  - test
  - push
  - clean_up

variables:
  CONTAINER_CROSSPLANE: registry.gitlab.com/$GITLAB_USER_LOGIN/nginx-plus-dockerfiles:ubuntu18.04_crossplane
  CONTAINER_NGINX_PLUS: registry.gitlab.com/armsultan/nginx-plus-dockerfiles:alpine3.9
  NAME_CONTAINER_NGINX: nginx-plus-appster-lb # container name
  NAME_CONTAINER_CROSSPLANE: nginx-plus-crossplane-appster-lb

replace_test_placeholder_values: # CI_JOB_NAME
  stage: configure_test
  script:
    - echo "$NGINX_REPO_CRT" > "etc/ssl/nginx/nginx-repo.crt"
    - echo "$NGINX_REPO_KEY" > "etc/ssl/nginx/nginx-repo.key"
    # - cp /etc/ssl/nginx/nginx-repo.* etc/ssl/nginx/
    # Point load balancing to test upstream (linux search and replace)
    - find . -type f -name ".conf" -exec sed -i 's/${upstream}/dummy_servers_html/g' {} +

build_nginx_container: # CI_JOB_NAME
  stage: build
  script:
    # - echo $NGINX_REPO_KEY > etc/ssl/nginx/nginx-repo.key
    # - echo $NGINX_REPO_CRT > etc/ssl/nginx/nginx-repo.crt
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" https://registry.gitlab.com
    - docker pull $CONTAINER_NGINX_PLUS
    - cp /etc/ssl/nginx/nginx-repo.* etc/ssl/nginx/

build_crossplane_container: # CI_JOB_NAME
  stage: build
  script:
    # - echo $NGINX_REPO_KEY > etc/ssl/nginx/nginx-repo.key
    # - echo $NGINX_REPO_CRT > etc/ssl/nginx/nginx-repo.crt
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" https://registry.gitlab.com
    - docker pull $CONTAINER_CROSSPLANE
    - cp /etc/ssl/nginx/nginx-repo.* etc/ssl/nginx/

test_nginx_conf: # CI_JOB_NAME
  stage: test
  script:
    - docker run --rm -t -a stdout --name $NAME_CONTAINER_NGINX --sysctl net.ipv4.ip_nonlocal_bind=1 -v "$(pwd)/etc/nginx/:/etc/nginx/" $CONTAINER_NGINX_PLUS nginx -t

crossplane_nginx_conf: # CI_JOB_NAME
  stage: test
  script:
    - docker run --rm -t -a stdout --name $NAME_CONTAINER_CROSSPLANE --sysctl net.ipv4.ip_nonlocal_bind=1 -v "$(pwd)/etc/nginx/:/etc/nginx/" $CONTAINER_CROSSPLANE crossplane parse /etc/nginx/nginx.conf | jq '.status, .errors[]'

push: # CI_JOB_NAME
  stage: push
  script:
    - sed -i -e '/#${servers}/{r environments/production.conf' -e 'd}' etc/nginx/conf.d/*.conf
    - GIT_SSH_COMMAND='ssh -i $PRIVATE_KEY_FILE' git remote add master $PROD_USER@$PROD_HOST:appster_prod.git

clean_up:
  stage: clean_up
  script:
    - docker system prune -f
    - docker images
  when: always # Run regardless of job failures
